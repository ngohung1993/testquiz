<?php

namespace frontend\controllers;

use Yii;
use yii\web\Response;
use common\models\User;
use common\models\Exam;
use yii\db\ActiveRecord;
use yii\data\Pagination;
use common\models\Topic;
use yii\web\UploadedFile;
use common\models\SeoTool;
use yii\filters\VerbFilter;
use common\models\Category;
use common\models\Question;
use common\models\UserExam;
use common\models\Classroom;
use common\models\PriceExam;
use yii\filters\AccessControl;
use common\models\ExamQuestion;
use common\helpers\FunctionHelper;
use common\models\ClassroomDetail;
use yii\web\NotFoundHttpException;
use common\models\ReportQuestion;
use common\models\TransactionHistory;
use frontend\controllers\base\BaseController;

class ExamController extends BaseController
{
    public $user;
    public $classrooms;
    public $categories;
    public $price_exams;

    /**
     * @throws NotFoundHttpException
     */
    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub

        $this->classrooms = Classroom::find()->where(['status' => Classroom::ACTIVE])->all();
        $this->price_exams = PriceExam::find()->all();
        $this->categories = Category::find()->where(['type' => Category::TOPIC])->all();
    }

    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            'access' => [
                'class' => AccessControl::className(),
                'only' => ['index', 'create', 'delete', 'question', 'update', 'upload', 'filter'],
                'rules' => [
                    [
                        'actions' => ['index', 'create', 'delete', 'question', 'update', 'upload', 'filter'],
                        'allow' => true,
                        'roles' => ['@']
                    ]
                ]
            ],
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'delete' => ['POST'],
                ]
            ]
        ];
    }

    /**
     * @param int $status
     * @param null $key
     * @return string
     */
    public function actionIndex($status = Exam::DUYET, $key = null)
    {
        $this->layout = 'profile';

        $query = Exam::find()
            ->joinWith('topic')
            ->where(['exam.user_id' => $this->user->id])
            ->andWhere(['exam.status' => $status])
            ->andWhere(['topic.active' => Topic::ACTIVE])
            ->andWhere(['exam.disable' => 1]);

        if ($key) {
            $query->andFilterWhere(['like', 'title', $key]);
        }

        $pages = new Pagination([
            'defaultPageSize' => 16,
            'totalCount' => $query->count(),
        ]);

        $exams = $query->offset($pages->offset)->limit($pages->limit)
            ->ORDERBY('updated_at DESC')
            ->all();

        return $this->render('index', [
            'exams' => $exams,
            'status' => $status,
            'user' => $this->user->id,
            'pages' => $pages,
            'key' => $key,
        ]);
    }

    /**
     * @return string|Response
     */
    public function actionCreate()
    {
        $this->layout = 'profile';

        $classroomDetail = '';
        $topic = '';

        $seo = new SeoTool();
        $model = new Exam();

        if ($model->load(Yii::$app->request->post())) {
            $seo->save();

            $model->seo_tool_id = $seo->id;
            $model->status = Exam::KHO_USER;
            $model->user_id = $this->user->id;
            $model->set_date_time = strtotime($model->set_date_time);
            $model->set_date_time_end = strtotime($model->set_date_time_end);
            $model->save(false);
            $model->slug = FunctionHelper::slug($model->title) . '-' . $model->id;

            if ($model->save(false)) {
                return $this->redirect([$model->type == Exam::CUSTOM ? 'question' : 'upload', 'id' => $model->id]);
            }
        }

        return $this->render('create', [
            'seo' => $seo,
            'model' => $model,
            'topic' => $topic,
            'classrooms' => $this->classrooms,
            'categories' => $this->categories,
            'price_exams' => $this->price_exams,
            'classroomDetail' => $classroomDetail,
        ]);
    }

    /**
     * @param $id
     * @return string|Response
     * @throws NotFoundHttpException
     */
    public function actionUpdate($id)
    {
        $this->layout = 'profile';

        $model = $this->findModelOwner($id);
        $seo = SeoTool::findOne($model['seo_tool_id']);
        $topic = Topic::findOne($model['topic_id']);

        $classroomDetail = ClassroomDetail::findOne($topic['classroom_detail_id']);

        $this->checkUpdate($model['status']);

        if ($model->load(Yii::$app->request->post())) {
            $model->slug = FunctionHelper::slug($model->title) . '-' . $model->id;
            $seo->save();

            if ($model->set_date_time) {
                $model->set_date_time = strtotime($model->set_date_time);
            }

            if ($model->set_date_time_end) {
                $model->set_date_time_end = strtotime($model->set_date_time_end);
            }

            if ($model->save()) {
                return $this->redirect([$model->type == Exam::CUSTOM ? 'question' : 'upload', 'id' => $model->id]);
            }
        }

        return $this->render('update', [
            'seo' => $seo,
            'model' => $model,
            'topic' => $topic,
            'classrooms' => $this->classrooms,
            'categories' => $this->categories,
            'price_exams' => $this->price_exams,
            'classroomDetail' => $classroomDetail,
        ]);
    }

    /**
     * @param $id
     * @return string
     * @throws NotFoundHttpException
     */
    public function actionView($id)
    {
        $this->layout = 'question';
        $exam = $this->findModelOwner($id);

        $questions = Question::find()->where(['id' => ExamQuestion::find()->select('question_id')->where(['exam_id' => $id])])->all();
        $view = $exam->type == Exam::CUSTOM ? 'view' : 'view-upload';

        return $this->render($view, [
            'exam' => $exam,
            'questions' => $questions
        ]);
    }

    /**
     * @param null $id
     * @param $status
     * @param $active
     * @param null $price
     * @return string
     */
    public function actionFilter($id = null, $status = Exam::DUYET, $active = Exam::DISABLE, $price = null)
    {
        $this->layout = 'profile';

        $query = Exam::find()->joinWith('topic')->where(['exam.user_id' => $this->user->id]);

        $topic = null;
        if ($id) {
            $topic = Topic::findOne($id);
            $query->andWhere(['exam.topic_id' => $id]);
        }

        $query->andWhere(['=', 'exam.status', $status]);

        if ($active) {
            $query->andWhere(['=', 'topic.active', Exam::BLOCK]);
        }

        if ($price) {
            $query->andWhere(['=', 'exam.price', $price]);
        }

        $pages = new Pagination([
            'defaultPageSize' => 16,
            'totalCount' => $query->count(),
        ]);

        $exams = $query->offset($pages->offset)->limit($pages->limit)
            ->ORDERBY('updated_at DESC')
            ->all();

        return $this->render('filter', [
            'exams' => $exams,
            'status' => $status,
            'user' => $this->user->id,
            'pages' => $pages,
            'topic' => $topic,
            'active' => $active,
            'id' => $id,
            'price' => $price
        ]);
    }

    /**
     * @param int $type
     * @return string
     */
    public function actionBought($type = UserExam::BOUGHT)
    {
        $this->layout = 'profile';

        $query = UserExam::find()->where(['user_id' => $this->user->id])->andWhere(['type' => $type]);
        $pages = new Pagination([
            'defaultPageSize' => 6,
            'totalCount' => $query->count(),
        ]);

        $exams = $query->offset($pages->offset)->limit($pages->limit)
            ->orderBy('id DESC')
            ->all();

        return $this->render('bought', [
            'user' => $this->user,
            'exams' => $exams,
            'pages' => $pages,
            'type' => $type
        ]);

    }

    /**
     * @param $id
     * @param $status
     * @param null $key
     * @return string
     */
    public function actionTopic($id, $status, $key = null)
    {
        $this->layout = 'profile';
        $topic = Topic::findOne($id);

        $query = Exam::find()
            ->where(['user_id' => $this->user->id])
            ->andWhere(['topic_id' => $id])
            ->andWhere(['status' => $status])
            ->andWhere(['exam.disable' => 1]);

        if ($key) {
            $query->andFilterWhere(['like', 'title', $key]);
        }
        $pages = new Pagination([
            'defaultPageSize' => 16,
            'totalCount' => $query->count(),
        ]);

        $exams = $query->offset($pages->offset)->limit($pages->limit)
            ->ORDERBY('updated_at DESC')
            ->all();

        return $this->render('topic', [
            'topic' => $topic,
            'exams' => $exams,
            'status' => $status,
            'user' => $this->user->id,
            'pages' => $pages,
            'key' => $key
        ]);
    }

    /**
     * @param $id
     * @param null $type
     * @param null $question_id
     * @return string
     * @throws NotFoundHttpException
     */
    public function actionQuestion($id, $type = null, $question_id = null)
    {
        $this->layout = 'question';

        $exam = $this->findModel($id);

        $viewFormQuestion = $type || $question_id ? true : false;

        $questions = Question::find()->where(['id' => ExamQuestion::find()->select('question_id')->where(['exam_id' => $id])])->all();

        $isNewQuestion = true;
        $media = [];

        if ($question_id) {
            $question = $this->findQuestion($question_id);
            $media = json_decode($question->media, true);
            $isNewQuestion = false;
        } else {
            $question = new Question();
            $question->type = $type;
        }

        if ($question->load(Yii::$app->request->post())) {
            $media_key = ['content_media', 'explain_media', 'answer_a_media', 'answer_b_media', 'answer_c_media', 'answer_d_media'];

            foreach ($media_key as $key => $value) {
                $question[$value] = UploadedFile::getInstance($question, $value);

                if ($question[$value] && $question->validate()) {
                    if (!isset($media[$value])) {
                        $media[$value] = [];
                    }

                    $media[$value]['name'] = substr($question[$value]->baseName, 0, 10) . time();
                    $media[$value]['ext'] = $question[$value]->extension;

                    $fileName = $media[$value]['name'] . '.' . $media[$value]['ext'];
                    $question[$value]->saveAs('../../uploads/media/' . $fileName);
                }
            }

            $question->media = json_encode($media);

            $question->topic_id = $exam->topic_id;

            $post = Yii::$app->request->post();

            ksort($post['answer']);
            $question->answer = json_encode($post['answer']);

            if (isset($post['answerCorrect'])) {
                $question->answer_correct = json_encode($post['answerCorrect']);
            }

            $question->save();

            if ($isNewQuestion) {
                $exam_question = new ExamQuestion();

                $exam_question->exam_id = $id;
                $exam_question->question_id = $question->id;

                $exam_question->save();

                $exam->number_question++;
                $exam->save();
            }

            return $this->redirect(['question', 'id' => $id]);
        }

        return $this->render('question', [
            'exam' => $exam,
            'question' => $question,
            'questions' => $questions,
            'viewFormQuestion' => $viewFormQuestion
        ]);
    }

    /**
     * @param $id
     * @param null $type
     * @param null $question_id
     * @return string
     * @throws NotFoundHttpException
     */
    public function actionEditQuestion($id, $type = null, $question_id = null)
    {
        $this->layout = 'question';

        $exam = $this->findModel($id);

        $viewFormQuestion = $type || $question_id ? true : false;

        $questions = ReportQuestion::find()
            ->innerJoin('question', 'report_question.question_id = question.parent_id')
            ->innerJoin('exam_question', 'exam_question.question_id = question.parent_id')
            ->innerJoin('exam', 'exam.id = exam_question.exam_id')
            ->where(['exam.id' => $id])
            ->andWhere(['report_question.status' => ReportQuestion::STATUS_WARNING_HENDLE])
            ->asArray()
            ->all();

        $isNewQuestion = true;
        $media = [];

        if ($question_id) {
            $question = $this->findQuestion($question_id);
            $media = json_decode($question->media, true);
            $isNewQuestion = false;
        } else {
            $question = new Question();
            $question->type = $type;
        }

        if ($question->load(Yii::$app->request->post())) {
            $media_key = ['content_media', 'explain_media', 'answer_a_media', 'answer_b_media', 'answer_c_media', 'answer_d_media'];

            foreach ($media_key as $key => $value) {
                $question[$value] = UploadedFile::getInstance($question, $value);

                if ($question[$value] && $question->validate()) {
                    if (!isset($media[$value])) {
                        $media[$value] = [];
                    }

                    $media[$value]['name'] = substr($question[$value]->baseName, 0, 10) . time();
                    $media[$value]['ext'] = $question[$value]->extension;

                    $fileName = $media[$value]['name'] . '.' . $media[$value]['ext'];
                    $question[$value]->saveAs('../../uploads/media/' . $fileName);
                }
            }

            $question->media = json_encode($media);

            $question->topic_id = $exam->topic_id;

            $post = Yii::$app->request->post();

            ksort($post['answer']);
            $question->answer = json_encode($post['answer']);

            if (isset($post['answerCorrect'])) {
                $question->answer_correct = json_encode($post['answerCorrect']);
            }

            $question->save();

            if ($isNewQuestion) {
                $exam_question = new ExamQuestion();

                $exam_question->exam_id = $id;
                $exam_question->question_id = $question->id;

                $exam_question->save();

                $exam->number_question++;
                $exam->save();
            }

            $reportQuestion = ReportQuestion::find()
                ->where(['question_id' => $question->parent_id])
                ->andWhere(['status' => ReportQuestion::STATUS_WARNING_HENDLE])
                ->one();
            $reportQuestion->status = ReportQuestion::STATUS_PROCESSED;
            $reportQuestion->save();

            return $this->redirect(['edit-question', 'id' => $id]);
        }

        return $this->render('edit-question', [
            'exam' => $exam,
            'question' => $question,
            'questions' => $questions,
            'viewFormQuestion' => $viewFormQuestion
        ]);
    }

    protected function findQuestion($id)
    {
        if (($model = Question::findOne($id)) !== null) {
            return $model;
        }

        throw new NotFoundHttpException(Yii::t('app', 'The requested page does not exist.'));
    }

    /**
     * @param $id
     * @return string
     * @throws NotFoundHttpException
     */
    public function actionUpload($id)
    {
        $this->layout = 'profile';

        $model = $this->findModel($id);

        $this->checkUpdate($model['status']);

        if ($model->load(Yii::$app->request->post())) {

            if ($model->answer) {
                $model->answer = json_encode($this->getAnswersByString($model['answer']));
            }

            if ($model->status == null) {
                $model->status = Topic::KHO_USER;
            }

            $model->fileUploadExam = UploadedFile::getInstance($model, 'fileUploadExam');

            $model->fileUploadAnswer = UploadedFile::getInstance($model, 'fileUploadAnswer');

            $folder = '/uploads/document/';

            if ($model->fileUploadExam) {

                $temp = $folder . 'exam-' . $model->id . '-' . time() . '.' . $model->fileUploadExam->extension;

                $model->fileUploadExam->saveAs('../..' . $temp);
                $model->file_exam = $temp;
            }

            if ($model->fileUploadAnswer) {

                $temp = $folder . 'answer-' . $model->id . '-' . time() . '.' . $model->fileUploadAnswer->extension;

                $model->fileUploadAnswer->saveAs('../..' . $temp);
                $model->file_answer = $temp;
            }
            $model->save(false);

            return $this->redirect(['exam/index', 'status' => $model->status]);
        }

        return $this->render('upload', [
            'id' => $id,
            'model' => $model,
        ]);
    }

    private function getAnswersByString($string)
    {
        $array_answer = [];
        $arr = explode(';', $string);

        $lastEl = array_values(array_slice($arr, -1))[0];

        if ($lastEl == '') {
            unset($arr[count($arr) - 1]);
        }

        foreach ($arr as $key => $value) {
            $temp = explode(':', $value);
            $array_answer[$temp[0]] = $temp[1];
        }

        return $array_answer;
    }

    /**
     * @param $id
     * @return array|ActiveRecord|null
     * @throws NotFoundHttpException
     */
    protected function findExamBuy($id)
    {
        $model = UserExam::find()->where(['exam_id' => $id])->one();

        if ($model || Exam::find()->where(['user_id' => $this->user->id])->andWhere(['id' => $id])->one()) {
            return $model;
        }

        throw new NotFoundHttpException(Yii::t('app', 'The requested page does not exist.'));
    }

    /**
     * @param $slug
     * @return string
     * @throws NotFoundHttpException
     */
    public function actionListExam($slug)
    {
        $topic = Topic::find()->joinWith('category')->where(['topic.slug' => $slug])->one();
        if (!$topic) {
            $exams = null;
            throw new NotFoundHttpException(Yii::t('app', 'The requested page does not exist.'));
        } else {
            $exams = Exam::find()->where(['status' => Exam::DUYET])->andWhere(['topic_id' => $topic['id']])->asArray()->all();
        }
        return $this->render('list-exam', ['exams' => $exams, 'topic' => $topic]);
    }

    /**
     * @param $slug
     * @return string
     * @throws NotFoundHttpException
     */
    public function actionDetail($slug)
    {

        if ($this->user) {
            $list_favorite = UserExam::find()->where(['user_id' => $this->user->id])->andWhere(['type' => UserExam::SAVE])->all();
        } else {
            $list_favorite = [];
        }
        $exam = Exam::find()->joinWith('topic')->joinWith('user')->where(['exam.slug' => $slug])->andWhere(['or', ['exam.status' => Exam::EXAM_ERROR], ['exam.status' => Exam::DUYET]])->one();

        if (!$exam) {
            throw new NotFoundHttpException(Yii::t('app', 'The requested page does not exist.'));
        }

        $questions = Question::find()->where(['id' => ExamQuestion::find()->select('question_id')->where(['exam_id' => $exam['id']])])->all();

        return $this->render('detail', [
            'exam' => $exam,
            'user' => $this->user,
            'class' => FunctionHelper::get_class_by_exam_id($exam['id']),
            'subject' => FunctionHelper::get_subject_by_exam_id($exam['id']),
            'questions' => $questions,
            'list_favorite' => $list_favorite
        ]);
    }

    /**
     * @param $exam_id
     * @return Response
     * @throws NotFoundHttpException
     */
    public function actionBuyExam($exam_id)
    {
        $exam = $this->findModel($exam_id);
        $error = [];

        if ($this->user == null) {
            $error = ['not-login', 'Lỗi đăng nhập!'];
        } else {
            $user_exam = UserExam::find()->where(['user_id' => $this->user->id])->andWhere(['exam_id' => $exam_id])->andWhere(['type' => UserExam::BOUGHT])->one();

            if (!$user_exam) {
                if ($this->user->wallet >= $exam['price']) {
                    $this->user->wallet = $this->user->wallet - $exam['price'];
                    $this->user->save();
                    $user_create_exam = User::findOne($exam['user_id']);
                    if ($user_create_exam) {
                        $user_create_exam['wallet'] += $exam['price'];
                        $user_create_exam->save();
                    }
                    $this->buyExam($exam_id);
                    $exam['count_bought'] = $exam['count_bought'] + 1;
                    $exam->save(false);

                    $this->saveHistoryBuyOrSell($this->user->id, $exam['price'], $exam->id, TransactionHistory::SELL_EXAM);
                    $this->saveHistoryBuyOrSell($exam['user_id'], $exam['price'], $exam->id, TransactionHistory::BY_EXAM);

                    $error = ['success', 'Mua đề thi thành công!'];
                } else {
                    $error = ['not_enough_money', 'Mua thất bại!'];
                }
            }
        }

        Yii::$app->session->setFlash($error[0], $error[1]);

        return $this->redirect(['detail', 'slug' => $exam['slug'], 'exam' => $exam, 'user' => $this->user]);
    }

    private function buyExam($exam_id)
    {
        $user_exam = new UserExam();
        $user_exam->type = UserExam::BOUGHT;
        $user_exam->user_id = $this->user->id;
        $user_exam->exam_id = $exam_id;

        return $user_exam->save();
    }

    private function saveHistoryBuyOrSell($user, $money, $exam, $type)
    {
        $transaction = new TransactionHistory();

        $transaction->code = 'GD0' . $user . '-' . time();
        $transaction->amount = $money;
        $transaction->status = TransactionHistory::SUCCESS;
        $transaction->type = $type;
        $transaction->user_id = $user;
        $transaction->time = date('Y-m-d', time() + 7 * 3600);
        $transaction->exam_id = $exam;

        return $transaction->save(false);
    }


    /**
     * @param $status
     * @throws NotFoundHttpException
     */
    protected function checkUpdate($status)
    {
        if ($status != Exam::KHO_USER && $status != Exam::KHONG_DUYET && $status != Exam::EXAM_ERROR) {
            throw new NotFoundHttpException(Yii::t('app', 'The requested page does not exist.'));
        }
    }

    /**
     * Finds the Exam model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param integer $id
     * @return Exam the loaded model
     * @throws NotFoundHttpException
     */
    protected function findModel($id)
    {
        if (($model = Exam::findOne($id)) !== null) {
            return $model;
        }

        throw new NotFoundHttpException(Yii::t('app', 'The requested page does not exist.'));
    }

    /**
     * @param $id
     * @return Exam the loaded model
     * @throws NotFoundHttpException
     */
    protected function findModelOwner($id)
    {
        if (($model = Exam::findOne($id)) !== null && $model->user_id == $this->user->id) {
            return $model;
        }

        throw new NotFoundHttpException(Yii::t('app', 'The requested page does not exist.'));
    }

}